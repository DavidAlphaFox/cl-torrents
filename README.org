TLDR: see the [[https://vindarel.github.io/cl-torrents/tutorial.html][tutorial]] !

[[https://gitlab.com/vindarel/cl-torrents][file:https://gitlab.com/vindarel/cl-torrents/badges/master/pipeline.svg]]

Download for GNU/Linux 64 bits: see [[https://gitlab.com/vindarel/cl-torrents/tags][Releases]] (/78Mo, self-contained executable/).

* cl-torrents

  This is  a little  tool for  the *lisp REPL*  or the  *command line*
  (also with  a readline *interactive  prompt*) to search  for torrents  and get
  magnet links.

  We currently  scrape [[http://1337x.to][1337x.to]]  (since v0.9)  and [[https://www.torrentdownloads.me][torrentdownloads.me]]
  (v0.10) and present the results sorted by seeders.

** Installation

   See the download link above.  It is a self-contained executable for
   GNU/Linux  64-bits.    You  do  /not/   need  to  install   a  Lisp
   implementation. It's a 78Mo binary.

   The Lisp lib  is not  distributed with  Quicklisp (or Roswell) (yet?).  Clone this  repo
   where Quicklisp can find it:

: git clone git@github.com:vindarel/cl-torrents.git ~/quicklisp/local-projects/

and install it:

: (ql:quickload "torrents")

To build the executable:

: make build


** Usage

   We can  use this little app  both in a  Lisp REPL (Slime) and  in a
   terminal, as a command line tool or from its embedded interactive prompt.

   Results are cached in =~/.cl-torrents/cache/=.

*** Lisp REPL

   Search for torrents:

#+BEGIN_SRC text
(use-package :torrents)
(torrentsearch "matrix")
  [...]
  6: The Matrix Revolutions (2003) BRRip [Dual Audio] [Hindi+Eng]
  5: Matrix (1999)Blu-Ray 720p Dublado PT-BR - mo93438
  4: The Matrix Trilogy (1999-2003) BDRip 1080p Dual Audio [ Hind
  3: The Matrix Trilogy (1999-2003) BluRay BDRip 1080p AC3
  2: The Matrix Trilogy (1999-2003) + Extras 1080p BluRay x264 Du
  1: The Matrix Reloaded (2003) FullHD, Dual Audio: English + Spa
  0: Matrix FRENCH DVDRIP 1999 COOL
#+END_SRC

  To help finding the most  relevant results (the website sometimes is
  a bit relaxed  with our search terms), each keyword  is printed in a
  different color:

#+html: <p align="center"><img src="img-colored-results.png" /></p>

  (you need  to enable ansi  colors in Slime,  see [[https://github.com/enriquefernandez/slime-repl-ansi-color][slime-repl-ansi-on]].
  Disable this feature with =(setf cl-ansi-text:*enabled* nil)=)


  We get a magnet link with:

#+BEGIN_SRC lisp
(magnet 0)
;; "magnet:?xt=urn:btih:40eca43690cf1b99b0a4d485ebf4855d20b0bac5"
#+END_SRC

  or the option =-m <index>=.

  And voilà :)

  We may add more features, eventually.  Our goal is rather to write a
  tutorial to show you diverse Common Lisp topics.

**** Parameters

=*cache-p*=: if nil, don't use the cache system.

*** Command line

Use the  options given below,

#+BEGIN_SRC text
$ torrents -h
CL-torrents. Usage:

Available options:
  -h, --help               print this help text
  -v, --version            print the version
  -n, --nb ARG             set the maximum number of results to print.
  -d, --details            print more details (like the torrent's url)
  -i, --interactive        enter an interactive repl
  -m, --magnet ARG         get the magnet link of the given search result.
#+END_SRC

Example: below we  search for "matrix…", we display only  1 result and
we get the magnet link of the first result.

: $ torrents -n 1 matrix french 1999 cool -m 0

#+html: <p align='center'><img src='img-cli.png' /></p>

*** Readline interface

Start it with =torrents -i=.

See the =help=.

Available commands are (use the auto-completion):

- =search=
- =magnet <i>=, where /i/ is a result index,
- =open= or =firefox <i>=: open the given torrent page in a web browser
- =url <i>=
- =nb-results= =n= to set the number of results to print to /n/
- =details=: toggle the display of details
- =quit= (or =C-c=)

We are in  a regular [[https://tiswww.case.edu/php/chet/readline/readline.html#SEC9][readline]] interface, so the  usual keybindings and
options are available.

#+html: <p align='center'><img src='img-readline.png' /></p>

*** Configuration file (new in v0.11)

    cl-torrents will (try to)  read a =cl-torrents.conf= configuration
    file  from   three  locations:  cl-torrents'   library  directory,
    =~/.config/cl-torrents.conf= and  the current directory.  The last
    one takes precedence.

    Example content:

#+BEGIN_SRC conf
[default]

scrapers = 1337 DOWNLOADSME
#+END_SRC

   On the Lisp side, this is easily provided by [[https://common-lisp.net/project/py-configparser/api-docs.shtml][py-configparser]].

** Tutorial

   Writing   a   little   web   scraper   like   this   one   is   not
   difficult. However, I had to spend  some time to find out the right
   libraries and resources.  It is also  not trivial at first to start
   a  Lisp project.  So this  tutorial is  a mix  of hopefully  useful
   stuff:

- web scraping,
- async web scraping,
- trying out things at the REPL,
- where to find documentation,
- creating and loading a project,
- basic data structures and gotchas,
- some useful libraries,
- unit tests, with mocks, running tests from the shell, continuous integration,
- parsing command line arguments, creating executables, continuous delivery,
- basics of error handling,
- ...

  It will eventually  tackle more topics and  features (more settings,
  working with a local copy of TPB…) but in the meanwhile, read

  the [[https://vindarel.github.io/cl-torrents/tutorial.html][tutorial]] !

  It was built with https://github.com/fniessen/org-html-themes.

** Ideas, todos

- [X] cache (on files) v0.3
- [X] CI
- local copy of TPB
- more command line options (specially verbosity)
  - [X] =-i= print url
- [X] build  with  ECL. Used  [[https://hub.docker.com/r/daewok/lisp-devel/][the  lisp-devel]]  docker
  image. Result: a 52Mo  executable with a runtime error.
- [X] open an url
- download the torrent file
- [X] ini config file, to parse with [[https://common-lisp.net/project/py-configparser/][py-configparser]]
- add torrent to a local torrent client
- add the torrent to a remote transmission client, with [[https://github.com/libre-man/cl-transmission/][cl-transmission]].
- self-contained web app ([[https://lispcookbook.github.io/cl-cookbook/scripting.html][doc]]),...
- [X] interactive prompt, with completion of commands.
  - save  the   settings  (details,   nb-results),  possibly   with  a
    persistent objects storage, will be straightforward.

** Release notes

[[https://gitlab.com/vindarel/cl-torrents/tags][https://gitlab.com/vindarel/cl-torrents/tags]]

*** v0.11 (dev)
- =cl-torrents.conf= configuration file.
*** v0.10

- added [[https://www.torrentdownloads.me][torrentdownloads.me]] scraper.
- new parameter, =*cache-p*=: if nil, don't use the cache.

*** v0.9

- added [[http://1337x.to][1337x.to]] scraper.
- removed piratebay.to, katcr.co, torrent.cd, they're down :/

*** v0.8

- added a readline-based repl  with some commands: =search=, =magnet=,
  =open=, with their completion.  See =help=.  Built with [[https://github.com/mrkkrp/cl-readline][cl-readline]],
  but might use [[https://github.com/vindarel/replic][replic]] anytime soon.

*** v0.7

- fix cache not created by binary
- create cache in =~/.cl-torrents/cache/=


* Dev

Clone in =~/quicklisp/local-projects= and =(ql:quickload :torrents)=.

Unit tests:

: make test

End-to-end tests (checking that the websites respond and our scrapers still work):

: make test-end2end

* Resources

  Don't miss these good resources:

- http://lisp-lang.org/
- [[Https://github.com/CodyReichert/awesome-cl][Awesome-cl]]
- [[https://lispcookbook.github.io/cl-cookbook/][the Common Lisp Cookbook]]
- http://quickdocs.org/
- (my) [[https://lisp-journey.gitlab.io/][lisp-journey]]: introductory posts, lists of resources, selection
  of screencasts.


* Setting up a Common Lisp environment

  The  easiest solution  of all  is to  try [[https://portacle.github.io/][Portacle]],  a portable  and
  multiplatform CL  environment shipping: Emacs25 and  Slime (slightly
  customized), SBCL, Quicklisp and Git.

  Emacs      isn't      the      only     editor      though,      see
   [[https://lispcookbook.github.io/cl-cookbook/editor-support.html][https://lispcookbook.github.io/cl-cookbook/editor-support.html]]  for   Vim  plugins,   to
  discover Lem (ncurses and Electron frontends), Atom-Slime, notebooks
  and the ipython-like [[https://github.com/koji-kojiro/cl-repl][cl-repl]].

  Anyway:

: apt install sbcl

   and install Quicklisp (two commands) and Slime for Emacs (in MELPA,
   with   package.el).   See
   [[https://lispcookbook.github.io/cl-cookbook/getting-started.html][https://lispcookbook.github.io/cl-cookbook/getting-started.html]].
